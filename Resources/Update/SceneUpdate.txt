local sceneUpdate = {}

local prefabName = "SceneUpdate"
local canvas = nil
local gameObject = nil

function sceneUpdate.init(obj)
	gameObject = GameObject.Instantiate(obj, Vector3.zero, Vector3.zero)
	transform = gameObject.transform
	
	sceneUpdate.initUI()
end

function sceneUpdate.initUI()
	local slider = transform:Find("Panel/Slider"):GetComponent(UI.Slider)
	local text = transform:Find("Panel/Text"):GetComponent(UI.Text)

	local targetPath = string.format("%s/UpdateTest.txt", Application.persistentDataPath)
	local url = string.format("file:///%s/UpdateTest.txt", UpdateManager.UpdateTest)
	local allSize = 0
	local downSize = 0
	local value = 0
	local updateProcessBar = function(fileName, state, percent)
		if state == 0 then
			text.text = string.format("下载文件: %s，下载%0.02fKb/%0.02fKb, 已完成%d%%", fileName, downSize, allSize, value/percent * 100)
		elseif state == 1 then
			text.text = string.format("下载文件: %s，下载%0.02fKb/%0.02fKb, 已完成%d%%", fileName, downSize, allSize, value/percent * 100)
		elseif state == 2 then
			text.text = string.format("下载文件: %s，下载%0.02fKb/%0.02fKb, 已完成%d%%", fileName, downSize, allSize, value/percent * 100)
		elseif state == 3 then
			value = value +1
			text.text = string.format("下载文件: %s，下载%0.02fKb/%0.02fKb, 已完成%d%%", fileName, downSize, allSize, value/percent * 100)
		end
		slider.value = value/percent

		if value >= percent then
			gameObject:SetActive(false)
			sceneUpdate.goTest()
		end
	end
	
	UpdateManager.GetInstance():Download(url, targetPath, DownloadFileType.TypeText, function(str)
		local updateTest = assert(loadstring(str))()
		allSize = updateTest.UpdateSize
		UpdateManager.GetInstance().OnUpdateStateChanged = function(fileName, state)
			updateProcessBar(fileName, state, #(updateTest.Configs) + #(updateTest.Prefabs) + #(updateTest.Scripts))
		end

		for i = 1, #(updateTest.Configs) do
			local targetPath = string.format("%s%s", Application.persistentDataPath, updateTest.Configs[i].name)
			local url = string.format("file:///%s%s", UpdateManager.UpdateTest, updateTest.Configs[i].name)
			UpdateManager.GetInstance():Download(url, targetPath, DownloadFileType.TypeText, function()
				downSize = downSize + updateTest.Configs[i].size
			end)
		end

		for i = 1, #(updateTest.Prefabs) do
			local targetPath = string.format("%s%s", Application.persistentDataPath, updateTest.Prefabs[i].name)
			local url = string.format("file:///%s%s", UpdateManager.UpdateTest, updateTest.Prefabs[i].name)
			UpdateManager.GetInstance():Download(url, targetPath, DownloadFileType.TypeAssetBundle, function()
				downSize = downSize + updateTest.Prefabs[i].size
			end)
		end

		for i = 1, #(updateTest.Scripts) do
			local targetPath = string.format("%s%s", Application.persistentDataPath, updateTest.Scripts[i].name)
			local url = string.format("file:///%s%s", UpdateManager.UpdateTest, updateTest.Scripts[i].name)
			UpdateManager.GetInstance():Download(url, targetPath, DownloadFileType.TypeText, function()
				downSize = downSize + updateTest.Scripts[i].size
			end)
		end
	end)
end

function sceneUpdate.goTest()
	local Test = require 'Script.Main'
	Test()
end

return sceneUpdate