--local AssetBundleConfig = require 'Script.Config.AssetBundleConfig'
local Missile = require 'Script.Base.Creature.Missile'
local skill = Class("Skill")

function skill:Ctor(parent)
	self.gameObject = parent.gameObject
	self.effectNames = parent.effectNames
	self.missileNames = parent.missileNames
	self.transform = parent.transform
	self.animator = parent.animator
    self.attackHandler = parent.attackHandler

	self.effects = {}
	self.missiles = {}

	self.isNormalAttack = false
	self.beginAnimation = false
	self.beginAnimationPhaser = false

	self:Init()
end

function skill:Init()
	if not self.gameObject then
		return
	end

	LuaEventManager.addUpdateEvent(self.gameObject, function()
		self:Update()
	end)
	LuaEventManager.addAnimationEvent(self.gameObject, function(type, param)
		self:OnAnimationEvent(type, param)
	end)

	self.attackEffectNode = self.transform:Find("AttackEffectNode")
	self.missileNode = self.transform:Find("MissileNode")
	self.updateHandler = self.gameObject:GetComponent(LuaUpdateEvent)
	self.updateHandler.enabled = false
	self:PreLoad()
end

function skill:PreLoad()

	for i=1,table.getn(self.effectNames) do
		local prefabName = self.effectNames[i]
		--local prefabRes = Resources.Load(prefabName)

		ResourceManager.GetInstance():SingleLineLoadAsync(prefabName, function(obj)	
			local transform = self.attackEffectNode.transform
			local effect = GameObject.Instantiate(obj, transform.position, transform.rotation)
			LuaEventManager.addAnimationEvent(effect, function(type, param)
				self:OnAnimationEvent(type, param)
			end)
			effect:SetActive(false);
			table.insert(self.effects, effect)
		end)
	end

	for i=1,table.getn(self.missileNames) do
		local prefabName = self.missileNames[i]

		ResourceManager.GetInstance():SingleLineLoadAsync(prefabName, function(obj)	
			local transform = self.missileNode.transform
			local missile = GameObject.Instantiate(obj, transform.position, transform.rotation)
			LuaEventManager.addAnimationEvent(missile, function(type, param)
				self:OnAnimationEvent(type, param)
			end)
			missile:SetActive(false);
			table.insert(self.missiles, missile)
		end)
	end

	--AssetBundleManager.GetInstance():ClearCache()
end

function skill:Update()
	if self.beginAnimation then
		local info = self.animator:GetCurrentAnimatorStateInfo(0)
		
		if info.normalizedTime >= 0.95 and self.beginAnimationPhaser then
			self.beginAnimation = false
			self.animator:SetBool("attack", false)
			self.animator:SetBool("skillAttack", false)
			self.animator:SetBool("skillAttackP2", false)
			self.animator:SetInteger("attackId", 0)
			self.updateHandler.enabled = false
		end
		if info.normalizedTime >= 0.95 and not self.beginAnimationPhaser then
			self.beginAnimationPhaser = true
			self.animator:SetBool("skillAttackP2", true)
		end
	end
end

function skill:Attack(id)
	if not id then
		id = 1
	end

	self.isNormalAttack = true
	self.animator:SetBool("attack", true)
	self.animator:SetInteger("attackId", id)
end

function skill:SkillAttack(id)
	if not id then
		id = 1
	end

	self.isNormalAttack = false
	self.animator:SetBool("attack", true)
	self.animator:SetBool("skillAttack", true)
	self.animator:SetInteger("attackId", id)
end

function skill:PlaySound(id)

end

function skill:PlayEffect(id)
	if id <= table.getn(self.effects) then
		local effect = self.effects[id]
		effect.transform.position = self.attackEffectNode.transform.position
		effect.transform.localScale = self.gameObject.transform.localScale * 2
		effect:SetActive(true)
	end

	if not self.isNormalAttack then
		self.beginAnimation = true
		self.updateHandler.enabled = true
	end
end

function skill:Fire(id)
	if id <= table.getn(self.missiles) then
		local missile = self.missiles[id]
		missile.transform.position = self.missileNode.position
		missile.transform.localScale = self.gameObject.transform.localScale * 2
		Missile.New(missile, 0.2)
	end
end

function skill:AnimationFinished(param)
	if param then
		param:SetActive(false)
	end
end

function skill:AddAttackInstance(name)
    self.attackHandler:AddAttackInstance(name)
end

function skill:RemoveAttackInstance(name)
    self.attackHandler:RemoveAttackInstance(name)
end

function skill:OnAnimationEvent(funcName, param)
	if self[funcName] then
		self[funcName](self, param)
	end
end

return skill